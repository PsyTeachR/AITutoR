{
  "hash": "b3af86356932266ac8dc443008f73563",
  "result": {
    "engine": "knitr",
    "markdown": "\n# Code review\n\n**Written by Emily Nordmann**\n\n::: {.callout-caution}\nIn the interests of transparency, this chapter and the next are the ones I am least comfortable writing and I'd like to clearly acknowledge that I am barely one step ahead of you as a learner here so any constructive feedback is entirely welcome. \n:::\n\nIn this chapter you'll learn how to use AI to perform a code review and to add comments to your code. As you've already hopefully learned by working through this book, you have to be critical about anything the AI produces or suggests because it has no expert knowledge, but it can be a useful tool for checking and improving your code.\n\nDeBruine et al's [Code Check Guide](https://code-check-club.github.io/code-review-guide/) details what a comprehensive code check refers to:\n\n* Does it run? Can a researcher who uses that progamming language run it easily? Are any unusual or complex procedures explained?\n* Is it reproducible? Do you get the same outputs? Is it straightforward to check them?\n* Is it auditable/understandable? Even if you don’t have the expertise to assess the stats or data processing, is the code well-organised enough to figure out what is intended so mistakes could be detected? Are the outputs sufficiently detailed to allow interrogation?\n* Does it follow best practices? Is there too much repeated code that could benefit from modularisation? DRY (Don’t repeat yourself) and SPOT (Single Point of Truth)? Are the outputs of long processes saved and loaded from file? Are there unit tests? Do the variable names make sense? Do the results match what is shown in the output and there is no rounding up or down?\n* Is it correct and appropriate? Is the code actually doing what is intended? Is what is intended correct? Some logical problems can be caught without domain knowledge, such as intending to to filter out male subjects, but actually filtering them IN. Many other problems require domain and/or statistical knowledge, so may only be appropriate in some circumstances.\n\nHowever, some of these steps cannot (and should not) be performed by an AI. You should **never** upload your research data to an AI tool (unless you have specific ethical approval and have included this in your data management plan) so assessing reproducibility is difficult and the AI doesn't know what you *intended* to do and has no subject knowledge so it can't advise on anything theoretical.\n\nWhat we'll focus on in this chapter is therefore two components of code review: **comments**  and **refactoring** your code.\n\n## Code comments\n\nCode comments are lines or sections of text added within the code itself that are ignored by the computer when the program runs. They're there for human readers, not machines. In R, you add comments to code by adding `#` to the start of the string:\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# this is a comment\n\n# compute mean of three numbers\nmean(c(1,2,3))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 2\n```\n\n\n:::\n\n```{.r .cell-code}\n# compute sd of three numbers\nsd(c(1,2,3))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 1\n```\n\n\n:::\n:::\n\n\nComments are useful for several reasons:\n\n* Clarification: They explain what certain parts of the code do, making it easier for others (and yourself) to understand the logic and flow of the program.\n* Documentation: They provide information on how the code works or why certain decisions were made, which is helpful for future reference.\n* Debugging: Temporarily commenting out parts of code can help isolate sections that may be causing errors, without deleting the code.\n* Collaboration: In team projects, comments can be used to communicate with other developers about the status or purpose of the code.\n\nOverall, comments are a crucial part of writing clean, maintainable, and collaborative code. They help make the codebase more accessible and understandable to anyone who might work on it in the future.\n\nFor transparency, Gemini and Copilot wrote the above text.\n\n## Activity 1: Add comments with AI\n\nFirst we'll use use the `palmerpenguins` dataset again.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tidyverse)\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\n── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n✔ dplyr     1.1.2     ✔ readr     2.1.4\n✔ forcats   1.0.0     ✔ stringr   1.5.0\n✔ ggplot2   3.4.2     ✔ tibble    3.2.1\n✔ lubridate 1.9.2     ✔ tidyr     1.3.0\n✔ purrr     1.0.1     \n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\nℹ Use the conflicted package (<http://conflicted.r-lib.org/>) to force all conflicts to become errors\n```\n\n\n:::\n\n```{.r .cell-code}\nlibrary(palmerpenguins)\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nWarning: package 'palmerpenguins' was built under R version 4.3.3\n```\n\n\n:::\n\n```{.r .cell-code}\ndata(\"penguins\")\n```\n:::\n\n\nYou can use AI tools to help add comments to your code. In your chosen platform, input the following:\n\n> penguins_clean <- penguins %>%\n  filter(complete.cases(.)) %>%\n  mutate(across(where(is.factor), as.character)) %>%\n  mutate(species_sex = interaction(species, sex, sep = \"_\"))\n  \n> Add comments to this code\n\n\n\n::: {.cell}\n::: {.cell-output-display}\n![Adding comments](include/images/05-review/comment1.png){width=464}\n:::\n:::\n\n\nA few things to note:\n\n* The AI can only tell you **what** the code is doing, it can't say **why** you chose to do that. In this example, we've created a new column that combines species and sex but the comment gives us no idea what the rationale was for this. The more complex your analysis, the more crucial it becomes to explain the rationale.\n* The comments it produces can be quite verbose. Gemini was not as bad as ChatGPT, but even in the above example there's a bit more than is really necessary. I'd argue you could delete one of the comments in each section and it would still be clear. Too many comments are a different problem to too few, but they're still a problem.\n* In the above example, Gemini has also made the strange decision to make the code itself more verbose and it has removed the piping and split it into three different calls. So as always, review what it gives you. \n\n## Activity 2: Review existing comments\n\nIn addition to asking AI to comment your code, you can also ask it to review comments you've made yourself. As an act of masochism, I gave the AI some code I wrote for a publication and asked it to review it (the full paper [is here](https://link.springer.com/article/10.1007/s10734-024-01201-5) if you're interested, the quant analyses ended up being punted to the online appendix because of word count.\n\nYou can load in the dataset yourself with this code:\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# read in data but skip rows 2 and 3\ncol_names <- names(read_csv(\"https://osf.io/download/tf3xs/\", n_max = 0))\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nRows: 0 Columns: 40\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr (40): StartDate, EndDate, Status, Progress, Duration (in seconds), Finis...\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n```\n\n\n:::\n\n```{.r .cell-code}\ndat_raw <- read_csv(\"https://osf.io/download/tf3xs/\", col_names = col_names, skip = 3) \n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nRows: 419 Columns: 40\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr (36): StartDate, EndDate, Status, RecordedDate, ResponseId, Distribution...\ndbl  (3): Progress, Duration (in seconds), Q5\nlgl  (1): Finished\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n```\n\n\n:::\n:::\n\n\n\nAs you can see, there's quite a complicated and long bit of wrangling - and this is actually a shortened version because it hit the character limit for Copilot. The prompt was:\n\n> Review my use of comments and make improvements to the comments where necessary. Explain what you changed and why. \n\nThis was the original code - I did put some effort into writing comments so I wasn't expecting it to need to change that much.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndat <- dat_raw%>%\n  filter(Progress > 94, # remove incomplete responses\n         DistributionChannel != \"preview\") %>% # Remove Emily's preview data\n  select(ResponseId, \"duration\" = 5, Q5:Q21) %>%\n  # replace NAs with \"none\" for disability info\n  mutate(disability_nos = replace_na(disability_nos, \"None\"),\n         physical_chronic = replace_na(physical_chronic, \"None\"),\n         mental_health = replace_na(mental_health, \"None\"),\n) %>%\n  # recode disability data\n  mutate(disability = case_when(# neurodivergent \n                                  neurotype == \"Neurodivergent\" &\n                                  physical_chronic == \"None\" &\n                                  mental_health == \"None\" & \n                                  disability_nos == \"None\" ~\n                                  \"Neurodivergent\",\n                                 # disabled\n                                  neurotype == \"Neurotypical\" &\n                                  physical_chronic == \"Physical, mobility, or chronic health condition\" |\n                                  mental_health == \"Mental health condition\" |\n                                  disability_nos == \"Disability not otherwise specified\" ~\n                                  \"Disabled\",\n                                 # multiple conditions\n                                 (neurotype == \"Neurodivergent\" & mental_health != \"None\") |\n      (neurotype == \"Neurodivergent\" & physical_chronic != \"None\") |\n      (neurotype == \"Neurodivergent\" & disability_nos != \"None\") |\n      (mental_health != \"None\" & physical_chronic != \"None\") |\n      (mental_health != \"None\" & disability_nos != \"None\") |\n      (physical_chronic != \"None\" & disability_nos != \"None\") ~ \"NDD\",\n                                \n                                TRUE ~ \"Neurotypical & non-disabled\"))%>%\n  # recode gender data\n\n  mutate(gender_cleaned = case_when(Q6 %in% c(\"Female\", \"female\", \"Woman\", \"woman\", \"Cisgender woman\",\"female (she/her)\", \"F\", \"f\", \"Womxn\", \"Woman (tranas)\") ~ \"Woman\",\n                                    Q6 %in% c(\"Man\", \"man\", \"M\", \"m\", \"Male (he/him)\", \"Male\", \"male\", \"Trans man.\") ~ \"Man\",\n                                    Q6 %in% c(\"Agender\", \"Genderfluid\", \"GNC\", \"NB\", \"non-binary\", \"\t\nNon-binary\", \"Non-Binary\", \"Non-binary femme\", \"non-binary male\", \"non binary\",\n\"Non binary\", \"Nonbinary\", \"Queer\", \"Transmasculine\", \"Non-binary\") ~ \"Non-binary\",\n                            TRUE ~ \"Not stated\")) %>%\n  # select necessary columns and tidy up the names\n        select(ResponseId,\n             \"age\" = Q5,\n             \"gender\" = Q6,\n             gender_cleaned,\n             \"mature\" = Q7,\n             \"level_study\" = Q8,\n             \"country\" = Q9,\n             \"subject\" = Q10,\n             \"english_first\" = Q11,\n             disability,\n             \"neurotype_open\" = Q13, \n             \"disability_open\" = Q14,\n             \"why_open\" = Q18,\n             \"how_open\" = Q23,\n             \"advantages\" = Q20,\n             \"disadvantages\" = Q21,\n             everything()) \n```\n:::\n\n\nEach platform gave slightly different output with slightly different issues:\n\n### Gemini output \n\n* As well as giving me an explanation in the chat window, Gemini added the explanation to the comments themselves, so you'd need to go and edit these out (or amend the prompt to tell it not to do this). \n* It has picked up where the logic of the comments might not be helpful to someone who doesn't already know the data e.g., (explain logic), which is useful.\n* Extremely problematically,  it didn't just change the comments, it changed the code. The original first use of `select()` was `select(ResponseId, \"duration\" = 5, Q5:Q21) %>%`. In this code, I selected the columns I wanted but I also renamed the 5th column. Gemini has changed the code to remove this from select and has instead create a new column named `duration` that will contain the value 5. I didn't ask it to do this and in its response, it doesn't tell me anywhere that it made this change. **Be very, very careful**.\n* It's also removed some of the code, for example, in the gender coding we now have the comment `# Include common variations` rather than the original list which means the code wont' run.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndat_gemini <- dat_raw %>%\n  # Filter incomplete responses and remove preview data (for clarity)\n  filter(Progress > 94, DistributionChannel != \"preview\") %>%\n  # Select core columns and create a \"duration\" column (more specific)\n  select(ResponseId, Q5:Q21) %>%\n  mutate(\n    duration = 5,  # Assuming duration is constant at 5, explain if not\n    # Replace NAs in disability info with \"None\" (clearer intent)\n    disability_nos = replace_na(disability_nos, \"None\"),\n    physical_chronic = replace_na(physical_chronic, \"None\"),\n    mental_health = replace_na(mental_health, \"None\")\n  ) %>%\n  # Recode disability data into more informative categories (explain logic)\n  mutate(disability = case_when(\n    # Neurodivergent with no other conditions\n    neurotype == \"Neurodivergent\" &\n      physical_chronic == \"None\" &\n      mental_health == \"None\" &\n      disability_nos == \"None\" ~ \"Neurodivergent\",\n    # Disabled with any reported condition\n    neurotype == \"Neurotypical\" &\n      (physical_chronic != \"None\" |  # Include \"OR\" for clarity\n       mental_health != \"None\" |\n       disability_nos != \"None\") ~ \"Disabled\",\n    # Multiple conditions (explain groupings)\n    (neurotype == \"Neurodivergent\" &\n      (physical_chronic != \"None\" |\n       mental_health != \"None\" |\n       disability_nos != \"None\")) |\n    (physical_chronic != \"None\" &\n     (mental_health != \"None\" |\n      disability_nos != \"None\")) |\n    (mental_health != \"None\" & disability_nos != \"None\") ~ \"NDD\"  # Define NDD acronym\n    , TRUE ~ \"Neurotypical & non-disabled\")) %>%\n  # Recode gender data into more concise categories (explain categories)\n  mutate(gender_cleaned = case_when(\n    Q6 %in% c(\"Female\", \"woman\", \"cisgender woman\", ...) ~ \"Woman\",  # Include common variations\n    Q6 %in% c(\"Man\", \"male\", \"trans man\") ~ \"Man\",\n    Q6 %in% c(\"Non-binary\", \"genderqueer\", \"agender\", ...) ~ \"Non-binary\",  # Include common variations\n    TRUE ~ \"Not stated\")) %>%\n  # Select final columns and rename for clarity\n  select(ResponseId,\n         age = Q5,\n         gender = Q6,\n         gender_cleaned,\n         mature = Q7,\n         level_study = Q8,\n         country = Q9,\n         subject = Q10,\n         english_first = Q11,\n         disability,\n         neurotype_open = Q13,\n         disability_open = Q14,\n         why_open = Q18,\n         how_open = Q23,\n         advantages = Q20,\n         disadvantages = Q21,\n         everything())\n```\n:::\n\n\n\n> Explanation of Changes:\n> Clarity: Added more specific explanations to comments, especially for variable creation and data manipulation steps.\nLogic: Explained the reasoning behind the recoding logic in the case_when statements for disability and gender.\nConciseness: Shortened some comments where brevity is sufficient.\nAcronyms: Defined the acronym \"NDD\" for better understanding.\nConsistency: Used consistent formatting for comments (e.g., indentation).\nThese improvements enhance the readability and maintainability of your code, making it easier for you or others to understand the purpose of each step.\n\n### Copilot output\n\n* Generally much better than Gemini, particularly for expanding on the more complex recoding of neurodivergence.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndat_copilot <- dat_raw %>%\n  filter(Progress > 94, # Keep only responses with progress over 94%\n         DistributionChannel != \"preview\") %>% # Exclude preview data, such as test entries\n  select(ResponseId, \"duration\" = 5, Q5:Q21) %>%\n  # Replace missing values with \"None\" for disability-related columns\n  mutate(disability_nos = replace_na(disability_nos, \"None\"),\n         physical_chronic = replace_na(physical_chronic, \"None\"),\n         mental_health = replace_na(mental_health, \"None\")) %>%\n  # Recode disability categories based on survey responses\n  mutate(disability = case_when(\n    # Classify as \"Neurodivergent\" if only neurotype is divergent and no other conditions reported\n    neurotype == \"Neurodivergent\" &\n    physical_chronic == \"None\" &\n    mental_health == \"None\" & \n    disability_nos == \"None\" ~ \"Neurodivergent\",\n    \n    # Classify as \"Disabled\" if any physical, mental, or unspecified disability is reported\n    neurotype == \"Neurotypical\" &\n    (physical_chronic == \"Physical, mobility, or chronic health condition\" |\n     mental_health == \"Mental health condition\" |\n     disability_nos == \"Disability not otherwise specified\") ~ \"Disabled\",\n    \n    # Classify as \"NDD\" (Neurodivergent with Disabilities) if multiple conditions are reported\n    (neurotype == \"Neurodivergent\" & mental_health != \"None\") |\n    (neurotype == \"Neurodivergent\" & physical_chronic != \"None\") |\n    (neurotype == \"Neurodivergent\" & disability_nos != \"None\") |\n    (mental_health != \"None\" & physical_chronic != \"None\") |\n    (mental_health != \"None\" & disability_nos != \"None\") |\n    (physical_chronic != \"None\" & disability_nos != \"None\") ~ \"NDD\",\n    \n    TRUE ~ \"Neurotypical & non-disabled\")) %>%\n  # Recode gender data based on survey responses\n  mutate(gender_cleaned = case_when(\n    Q6 %in% c(\"Female\", \"female\", \"Woman\", \"woman\", \"Cisgender woman\",\"female (she/her)\", \"F\", \"f\", \"Womxn\", \"Woman (tranas)\") ~ \"Woman\",\n    Q6 %in% c(\"Man\", \"man\", \"M\", \"m\", \"Male (he/him)\", \"Male\", \"male\", \"Trans man.\") ~ \"Man\",\n    Q6 %in% c(\"Agender\", \"Genderfluid\", \"GNC\", \"NB\", \"non-binary\", \"Non-binary\", \"Non-Binary\", \"Non-binary femme\", \"non-binary male\", \"non binary\", \"Non binary\", \"Nonbinary\", \"Queer\", \"Transmasculine\", \"Non-binary\") ~ \"Non-binary\",\n    TRUE ~ \"Not stated\")) %>%\n  # Select and rename columns for analysis\n  select(ResponseId,\n         \"age\" = Q5,\n         \"gender\" = Q6,\n         gender_cleaned,\n         \"mature\" = Q7,\n         \"level_study\" = Q8,\n         \"country\" = Q9,\n         \"subject\" = Q10,\n         \"english_first\" = Q11,\n         disability,\n         \"neurotype_open\" = Q13, \n         \"disability_open\" = Q14,\n         \"why_open\" = Q18,\n         \"how_open\" = Q23,\n         \"advantages\" = Q20,\n         \"disadvantages\" = Q21,\n         everything())\n```\n:::\n\n\n> Changes Made:\nFilter Comment: Clarified that the progress filter keeps responses that are more than 94% complete.\nDistributionChannel Comment: Specified that the filter excludes test entries, not just Emily’s preview data.\nNA Replacement Comment: Made it clear that missing values are replaced in disability-related columns.\nDisability Recode Comment: Expanded on the conditions for classifying disabilities to make the logic more understandable.\nGender Recode Comment: No change needed, it’s clear and concise.\nSelect Statement Comment: Changed to ‘Select and rename columns for analysis’ for clarity on the operation’s purpose.\nThese changes aim to make the comments more informative and to clarify the purpose and outcome of each code block.\n\nWhilst it doesn't look like it has changed anything, `identical` and `all.equal` suggest a different story. I have been on quite a deep dive and I still can't figure it out - it all looks fine - but it's another note of caution and also a good reason not to give it too much code to review at once. It's easier to figure out what might have changed in little chunks at a time.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nidentical(dat, dat_copilot)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] FALSE\n```\n\n\n:::\n\n```{.r .cell-code}\nall.equal(dat, dat_copilot)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"Component \\\"disability\\\": 31 string mismatches\"\n```\n\n\n:::\n:::\n\n\n### ChatGPT output\n\n* ChatGPT is slightly less verbose than Copilot although I think it might depend on the audience which version is better (for future you, ChatGPT is concise but understandable, for people who don't know your data as well, perhaps Copilot's version is better).\n* Same issue as Copilot in that `identical` and `all.equal` suggest differences but I can't find them.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndat_chat <- dat_raw %>%\n  # Filter out incomplete responses and Emily's preview data\n  filter(Progress > 94, DistributionChannel != \"preview\") %>%\n  # Select necessary columns and rename them for clarity\n  select(ResponseId, \n         \"duration\" = 5, \n         Q5:Q21) %>%\n  # Replace NA values with \"none\" for disability information\n  mutate(disability_nos = replace_na(disability_nos, \"None\"),\n         physical_chronic = replace_na(physical_chronic, \"None\"),\n         mental_health = replace_na(mental_health, \"None\")) %>%\n  # Recode disability data based on various conditions\n  mutate(disability = case_when(\n    # Neurodivergent without other disabilities\n    neurotype == \"Neurodivergent\" &\n    physical_chronic == \"None\" &\n    mental_health == \"None\" & \n    disability_nos == \"None\" ~ \"Neurodivergent\",\n    # Disabled with specific conditions\n    neurotype == \"Neurotypical\" &\n    (physical_chronic == \"Physical, mobility, or chronic health condition\" |\n    mental_health == \"Mental health condition\" |\n    disability_nos == \"Disability not otherwise specified\") ~ \"Disabled\",\n    # Neurodevelopmental disorder (NDD) with multiple conditions\n    (neurotype == \"Neurodivergent\" & mental_health != \"None\") |\n    (neurotype == \"Neurodivergent\" & physical_chronic != \"None\") |\n    (neurotype == \"Neurodivergent\" & disability_nos != \"None\") |\n    (mental_health != \"None\" & physical_chronic != \"None\") |\n    (mental_health != \"None\" & disability_nos != \"None\") |\n    (physical_chronic != \"None\" & disability_nos != \"None\") ~ \"NDD\",\n    # Default case for neurotypical and non-disabled\n    TRUE ~ \"Neurotypical & non-disabled\")) %>%\n  # Recode gender data for consistency\n  mutate(gender_cleaned = case_when(\n    Q6 %in% c(\"Female\", \"female\", \"Woman\", \"woman\", \"Cisgender woman\",\"female (she/her)\", \"F\", \"f\", \"Womxn\", \"Woman (trans)\") ~ \"Woman\",\n    Q6 %in% c(\"Man\", \"man\", \"M\", \"m\", \"Male (he/him)\", \"Male\", \"male\", \"Trans man.\") ~ \"Man\",\n    Q6 %in% c(\"Agender\", \"Genderfluid\", \"GNC\", \"NB\", \"non-binary\", \"Non-binary\", \"Non-Binary\", \"Non-binary femme\", \"non-binary male\", \"non binary\", \"Non binary\", \"Nonbinary\", \"Queer\", \"Transmasculine\", \"Non-binary\") ~ \"Non-binary\",\n    TRUE ~ \"Not stated\")) %>%\n  # Select final necessary columns and tidy up the names\n  select(ResponseId,\n         \"age\" = Q5,\n         \"gender\" = Q6,\n         gender_cleaned,\n         \"mature\" = Q7,\n         \"level_study\" = Q8,\n         \"country\" = Q9,\n         \"subject\" = Q10,\n         \"english_first\" = Q11,\n         disability,\n         \"neurotype_open\" = Q13, \n         \"disability_open\" = Q14,\n         \"why_open\" = Q18,\n         \"how_open\" = Q23,\n         \"advantages\" = Q20,\n         \"disadvantages\" = Q21,\n         everything())\n```\n:::\n\n\n## Refactor code\n\nTo refactor code refers to the process of restructuring existing code without changing its intended behavior. The goal is to make the code more maintainable, readable, and efficient, while not altering the functionality or output.\n\n* Improves Readability: Makes the code easier to understand for anyone who reads it in the future, which includes other developers or even the original author after some time has passed.\n* Reduces Complexity: Simplifies complex code structures, breaking down large functions into smaller, more manageable ones.\n* Enhances Maintainability: With cleaner code, it becomes easier to maintain and update the software over time.\n* Facilitates Extensibility: Well-factored code can be extended with new features more easily.\n* Improves Performance: In some cases, refactoring can optimize the performance of the software by removing redundancies and improving algorithms.\n* Identifies Bugs: The process of refactoring can often reveal hidden bugs or issues in the code that can then be fixed.\n\nWith thanks to Copilot for writing the above.\n\n## Activity 3: Refactor\n\nI'll stick with the example of code from my publication because it's complicated enough that there are likely improvements or alternative solutions. Using the same code chunk as above, the prompt is:\n\n> refactor this code and explain what you have changed and why. Where possible, use a tidyverse approach. \n\n* All three AIs struggled with this task. Their first attempts all gave me errors. In particular, it struggled with `everything()` in the call to `select()` at the end. This function is useful for when you want to select specific columns in a particular order and then you want everything else you haven't explicitly named in the original order. My hunch is that `everything()` might be a newer argument to `select()` and isn't in the training data so it doesn't know how to use it?\n\nBut mostly the issues stemmed from the amount of code I was giving it at once because it made it very, very difficult for me figure out where the issues were coming in and to verify whether it was fundamentally changing the behaviour of the code.\n\nI then asked Copilot to split the code in each pipeline into a different object which it did:\n\n> Split the code in each pipeline into a separate object\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Step 1: Filter the data\ndat_filtered <- dat_raw %>%\n  filter(Progress > 94, DistributionChannel != \"preview\")\n\n# Step 2: Select and rename columns\ndat_selected <- dat_filtered %>%\n  select(ResponseId, \"duration\" = 5, Q5:Q21)\n\n# Step 3: Replace NAs with \"None\" for disability info\ndat_na_replaced <- dat_selected %>%\n  mutate(\n    disability_nos = replace_na(disability_nos, \"None\"),\n    physical_chronic = replace_na(physical_chronic, \"None\"),\n    mental_health = replace_na(mental_health, \"None\")\n  )\n\n# Step 4: Recode disability data\ndat_disability_recode <- dat_na_replaced %>%\n  mutate(\n    disability = case_when(\n      neurotype == \"Neurodivergent\" & physical_chronic == \"None\" & mental_health == \"None\" & disability_nos == \"None\" ~ \"Neurodivergent\",\n      neurotype == \"Neurotypical\" & (physical_chronic == \"Physical, mobility, or chronic health condition\" | mental_health == \"Mental health condition\" | disability_nos == \"Disability not otherwise specified\") ~ \"Disabled\",\n      (neurotype == \"Neurodivergent\" & mental_health != \"None\") | (neurotype == \"Neurodivergent\" & physical_chronic != \"None\") | (neurotype == \"Neurodivergent\" & disability_nos != \"None\") | (mental_health != \"None\" & physical_chronic != \"None\") | (mental_health != \"None\" & disability_nos != \"None\") | (physical_chronic != \"None\" & disability_nos != \"None\") ~ \"NDD\",\n      TRUE ~ \"Neurotypical & non-disabled\"\n    )\n  )\n\n# Step 5: Recode gender data\ndat_gender_recode <- dat_disability_recode %>%\n  mutate(\n    gender_cleaned = case_when(\n      Q6 %in% c(\"Female\", \"female\", \"Woman\", \"woman\", \"Cisgender woman\", \"female (she/her)\", \"F\", \"f\", \"Womxn\", \"Woman (tranas)\") ~ \"Woman\",\n      Q6 %in% c(\"Man\", \"man\", \"M\", \"m\", \"Male (he/him)\", \"Male\", \"male\", \"Trans man.\") ~ \"Man\",\n      Q6 %in% c(\"Agender\", \"Genderfluid\", \"GNC\", \"NB\", \"non-binary\", \"Non-binary\", \"Non-Binary\", \"Non-binary femme\", \"non-binary male\", \"non binary\", \"Non binary\", \"Nonbinary\", \"Queer\", \"Transmasculine\", \"Non-binary\") ~ \"Non-binary\",\n      TRUE ~ \"Not stated\"\n    )\n  )\n\n# Step 6: Select necessary columns and tidy up the names\ndat_final <- dat_gender_recode %>%\n  select(\n    ResponseId,\n    \"age\" = Q5,\n    \"gender\" = Q6,\n    gender_cleaned,\n    \"mature\" = Q7,\n    \"level_study\" = Q8,\n    \"country\" = Q9,\n    \"subject\" = Q10,\n    \"english_first\" = Q11,\n    disability,\n    \"neurotype_open\" = Q13,\n    \"disability_open\" = Q14,\n    \"why_open\" = Q18,\n    \"how_open\" = Q23,\n    \"advantages\" = Q20,\n    \"disadvantages\" = Q21,\n    everything()\n  )\n```\n:::\n\n\nThen, for each chunk, I asked it to refactor the code, where possible. I slightly amended the prompt to explicitly say that if the code was already efficient enough, not to change anything because some of the steps are quite simple.\n\n> Refactor this code where necessary. Explain what you changed and why. Do not change anything if the code is already efficient. Use the tidyverse where possible.\n\n* For step 3, Copilot and ChatGPT were both quite good at this and `identical()` returned `TRUE`.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# chatgpt and copilot solution\nchat_dat_na_replaced <- dat_selected %>%\n  mutate(\n    across(c(disability_nos, physical_chronic, mental_health), ~replace_na(., \"None\"))\n  )\n# gemini solution - doesn't work, is a bit mad\ndat_na_replaced <- dat_selected %>%\n  mutate(\n    disability_nos = replace_na(disability_nos, \"None\"),\n    physical_chronic = replace_na(physical_chronic, \"None\"),\n    mental_health = replace_na(mental_health, \"None\")\n  ) %>%\n  # Refactored using .after\n  mutate(\n    .after = {\n      .x$disability_nos <- replace_na(.x$disability_nos, \"None\")\n      .x$physical_chronic <- replace_na(.x$physical_chronic, \"None\")\n      .x$mental_health <- replace_na(.x$mental_chronic, \"None\")\n      .x\n    }\n  )\n```\n:::\n\n\nFor step 4 it was a bit of a mess:\n\n* The code Copilot gave me didn't work and the proposed solution to fix the initial error added on more code than I originally had.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# copilot\n# doesn't run\ncopilot_dat_disability_recode <- dat_na_replaced %>%\n  mutate(\n    # Simplify the neurodivergent condition by checking for \"None\" in all related columns at once\n    disability = case_when(\n      neurotype == \"Neurodivergent\" & across(c(physical_chronic, mental_health, disability_nos), ~ .x == \"None\") ~ \"Neurodivergent\",\n      \n      # Combine the neurotypical conditions into one line for clarity\n      neurotype == \"Neurotypical\" & (physical_chronic != \"None\" | mental_health != \"None\" | disability_nos != \"None\") ~ \"Disabled\",\n      \n      # Simplify the multiple conditions check by using any() to check if any of the conditions are met\n      neurotype == \"Neurodivergent\" & any(c(mental_health, physical_chronic, disability_nos) != \"None\") ~ \"NDD\",\n      \n      # Default condition remains the same\n      TRUE ~ \"Neurotypical & non-disabled\"\n    )\n  )\n```\n:::\n\n\n* Gemini's code worked but recoded the data incorrectly\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# gemini\ngemini_dat_disability_recode <- dat_na_replaced %>%\n  mutate(\n    disability = case_when(\n      neurotype == \"Neurodivergent\" & physical_chronic == \"None\" & mental_health == \"None\" & disability_nos == \"None\" ~ \"Neurodivergent\",\n      neurotype == \"Neurotypical\" & (physical_chronic %in% c(\"Physical, mobility, or chronic health condition\", \"Mental health condition\") | disability_nos == \"Disability not otherwise specified\") ~ \"Disabled\",\n      # Breakdown of long condition\n      (neurotype == \"Neurodivergent\" & !is.na(mental_health)) | (neurotype == \"Neurodivergent\" & !is.na(physical_chronic)) | (neurotype == \"Neurodivergent\" & disability_nos != \"None\") ~ \"NDD\",\n      TRUE ~ \"Neurotypical & non-disabled\"\n    )\n  )\n\ndat_disability_recode %>% \n  count(disability)\n```\n\n::: {.cell-output-display}\n<div class=\"kable-table\">\n\n|disability                  |   n|\n|:---------------------------|---:|\n|Disabled                    |  53|\n|NDD                         |  59|\n|Neurodivergent              | 126|\n|Neurotypical & non-disabled |  72|\n\n</div>\n:::\n\n```{.r .cell-code}\ngemini_dat_disability_recode %>% \n  count(disability)\n```\n\n::: {.cell-output-display}\n<div class=\"kable-table\">\n\n|disability                  |   n|\n|:---------------------------|---:|\n|Disabled                    |  39|\n|NDD                         |  59|\n|Neurodivergent              | 126|\n|Neurotypical & non-disabled |  86|\n\n</div>\n:::\n:::\n\n\n* ChatGPT's actually worked, returned an identical object, and made the code more efficient.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# chatGPT\n# Step 4: Recode disability data\nchat_dat_disability_recode <- dat_na_replaced %>%\n  mutate(\n    disability = case_when(\n      neurotype == \"Neurodivergent\" & physical_chronic == \"None\" & mental_health == \"None\" & disability_nos == \"None\" ~ \"Neurodivergent\",\n      neurotype == \"Neurotypical\" & (physical_chronic != \"None\" | mental_health != \"None\" | disability_nos != \"None\") ~ \"Disabled\",\n      neurotype == \"Neurodivergent\" | mental_health != \"None\" | physical_chronic != \"None\" | disability_nos != \"None\" ~ \"NDD\",\n      TRUE ~ \"Neurotypical & non-disabled\"\n    )\n  )\n\ndat_disability_recode %>% \n  count(disability)\n```\n\n::: {.cell-output-display}\n<div class=\"kable-table\">\n\n|disability                  |   n|\n|:---------------------------|---:|\n|Disabled                    |  53|\n|NDD                         |  59|\n|Neurodivergent              | 126|\n|Neurotypical & non-disabled |  72|\n\n</div>\n:::\n\n```{.r .cell-code}\nchat_dat_disability_recode %>% \n  count(disability)\n```\n\n::: {.cell-output-display}\n<div class=\"kable-table\">\n\n|disability                  |   n|\n|:---------------------------|---:|\n|Disabled                    |  53|\n|NDD                         |  59|\n|Neurodivergent              | 126|\n|Neurotypical & non-disabled |  72|\n\n</div>\n:::\n:::\n\n\n\n## Alternative approaches\n\nIn the PsyTeachR courses we strongly use the `tidyverse` approach but it's useful to be aware of other approaches, particularly Base R given that it doesn't require any package dependencies. \n\nYou can simply amend the prompt to say use Base R as an alternative:\n\n> when refactoring, use Base R instead of tidyverse \n\n* It's arguable whether it's that much more efficient but ChatGPT's output does indeed use Base R and did recode the variable correctly.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Step 4: Recode disability data\nchat_dat_disability_recode <- transform(dat_na_replaced,\n                                  disability = ifelse(neurotype == \"Neurodivergent\" & physical_chronic == \"None\" & mental_health == \"None\" & disability_nos == \"None\", \"Neurodivergent\",\n                                                     ifelse(neurotype == \"Neurotypical\" & (physical_chronic != \"None\" | mental_health != \"None\" | disability_nos != \"None\"), \"Disabled\",\n                                                            ifelse(neurotype == \"Neurodivergent\" | mental_health != \"None\" | physical_chronic != \"None\" | disability_nos != \"None\", \"NDD\",\n                                                                   \"Neurotypical & non-disabled\"))))\n\n\ndat_disability_recode %>% \n  count(disability)\n```\n\n::: {.cell-output-display}\n<div class=\"kable-table\">\n\n|disability                  |   n|\n|:---------------------------|---:|\n|Disabled                    |  53|\n|NDD                         |  59|\n|Neurodivergent              | 126|\n|Neurotypical & non-disabled |  72|\n\n</div>\n:::\n\n```{.r .cell-code}\nchat_dat_disability_recode %>% \n  count(disability)\n```\n\n::: {.cell-output-display}\n<div class=\"kable-table\">\n\n|disability                  |   n|\n|:---------------------------|---:|\n|Disabled                    |  53|\n|NDD                         |  59|\n|Neurodivergent              | 126|\n|Neurotypical & non-disabled |  72|\n\n</div>\n:::\n:::\n\n\n* Gemini's code did run but also managed to recode the variable from having four categories to two:\n\n\n::: {.cell}\n\n```{.r .cell-code}\ngemini_dat_disability_recode <- dat_na_replaced %>%\n  mutate(\n    disability = ifelse(\n      neurotype == \"Neurodivergent\" & all(c(physical_chronic, mental_health, disability_nos) == \"None\"),\n      \"Neurodivergent\",\n      ifelse(\n        neurotype == \"Neurotypical\" & any(physical_chronic %in% c(\"Physical, mobility, or chronic health condition\", \"Mental health condition\"), disability_nos == \"Disability not otherwise specified\"),\n        \"Disabled\",\n        ifelse(\n          # Combined condition using logical OR ( | )\n          (neurotype == \"Neurodivergent\" & !is.na(mental_health)) | (neurotype == \"Neurodivergent\" & !is.na(physical_chronic)) | (neurotype == \"Neurodivergent\" & disability_nos != \"None\") |\n            (!is.na(mental_health) & !is.na(physical_chronic)) | (!is.na(mental_health) & disability_nos != \"None\") | (!is.na(physical_chronic) & disability_nos != \"None\"),\n          \"NDD\",\n          \"Neurotypical & non-disabled\"\n        )\n      )\n    )\n  )\n\ndat_disability_recode %>% \n  count(disability)\n```\n\n::: {.cell-output-display}\n<div class=\"kable-table\">\n\n|disability                  |   n|\n|:---------------------------|---:|\n|Disabled                    |  53|\n|NDD                         |  59|\n|Neurodivergent              | 126|\n|Neurotypical & non-disabled |  72|\n\n</div>\n:::\n\n```{.r .cell-code}\ngemini_dat_disability_recode %>% \n  count(disability)\n```\n\n::: {.cell-output-display}\n<div class=\"kable-table\">\n\n|disability |   n|\n|:----------|---:|\n|Disabled   | 125|\n|NDD        | 185|\n\n</div>\n:::\n:::\n\n\n* Copilot's ran and coded the data correctly although it definitely isn't more concise. Although it does use Base R.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Step 4: Recode disability data using base R\ncopilot_dat_disability_recode <- dat_na_replaced\ncopilot_dat_disability_recode$disability <- with(dat_na_replaced, ifelse(\n  neurotype == \"Neurodivergent\" & physical_chronic == \"None\" & mental_health == \"None\" & disability_nos == \"None\", \"Neurodivergent\",\n  ifelse(neurotype == \"Neurotypical\" & (physical_chronic == \"Physical, mobility, or chronic health condition\" | mental_health == \"Mental health condition\" | disability_nos == \"Disability not otherwise specified\"), \"Disabled\",\n  ifelse((neurotype == \"Neurodivergent\" & mental_health != \"None\") | (neurotype == \"Neurodivergent\" & physical_chronic != \"None\") | (neurotype == \"Neurodivergent\" & disability_nos != \"None\") | (mental_health != \"None\" & physical_chronic != \"None\") | (mental_health != \"None\" & disability_nos != \"None\") | (physical_chronic != \"None\" & disability_nos != \"None\"), \"NDD\",\n  \"Neurotypical & non-disabled\"\n))))\n\ndat_disability_recode %>% \n  count(disability)\n```\n\n::: {.cell-output-display}\n<div class=\"kable-table\">\n\n|disability                  |   n|\n|:---------------------------|---:|\n|Disabled                    |  53|\n|NDD                         |  59|\n|Neurodivergent              | 126|\n|Neurotypical & non-disabled |  72|\n\n</div>\n:::\n\n```{.r .cell-code}\ncopilot_dat_disability_recode %>% \n  count(disability)\n```\n\n::: {.cell-output-display}\n<div class=\"kable-table\">\n\n|disability                  |   n|\n|:---------------------------|---:|\n|Disabled                    |  53|\n|NDD                         |  59|\n|Neurodivergent              | 126|\n|Neurotypical & non-disabled |  72|\n\n</div>\n:::\n:::\n\n\n## Conclusions\n\nI hadn't actually used AI to perform these types of tasks before writing this book so here's my takeaways:\n\n* CHECK EVERYTHING.\n* Because you have to check what it does so carefully, don't give it a big dump of code. Smaller chunks will end up taking less time.\n* In some cases it was really useful and as someone who doesn't really use or know much Base R, I can see that this would be a great way to learn alternative approaches or to fill in comments.\n* That said, the amount of checking it takes is substantial and so I'm not completely convinced that it would be any quicker than doing it yourself.\n* Of the three, Gemini was the clear loser of this chapter, which is a shame as I was starting to like it. \n\n::: {.callout-caution}\nThis book should be considered a **living document** and is likely to change over time. Given the brave new world in which we now live, all constructive feedback and suggestions are welcome! If you have any feedback or suggestions, please provide it [via Forms](https://forms.office.com/Pages/ResponsePage.aspx?id=KVxybjp2UE-B8i4lTwEzyKAHhjrab3lLkx60RR1iKjNUM0VCMUUxUUFLMTdNM0JTS09PSDg2SFQ3US4u).\n:::\n",
    "supporting": [
      "05-review_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}